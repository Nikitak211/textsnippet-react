{"version":3,"sources":["Homepage.js","App.js","index.js"],"names":["Homepage","useState","amountOfSnippets","setamountOfSnippets","text","setText","failed","setFailed","soundText","setSoundText","button","setButton","muted","setMuted","synth","useRef","speak","utterance","SpeechSynthesisUtterance","lang","current","textReader","a","handleSubmit","headers","Headers","append","fetch","method","body","JSON","stringify","score","then","response","ok","Error","json","data","success","message","failure","error","catch","err","name","console","log","useEffect","window","speechSynthesis","className","disabled","onChange","e","target","value","onClick","type","required","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAkHeA,EA/GE,WACb,MAAgDC,mBAAS,IAAzD,mBAAOC,EAAP,KAAyBC,EAAzB,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAkCN,mBAAS,IAA3C,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAA4BR,mBAAS,IAArC,mBAAOS,EAAP,KAAeC,EAAf,KACA,EAA0BV,oBAAS,GAAnC,mBAAOW,EAAP,KAAcC,EAAd,KAIMC,EAAQC,mBAERC,EAAQ,SAACZ,GACX,IAAMa,EAAY,IAAIC,yBAAyBd,GAC/Ca,EAAUE,KAAO,QACjBL,EAAMM,QAAQJ,MAAMC,IAGlBI,EAAU,uCAAG,sBAAAC,EAAA,sDACXV,GACAC,GAAS,GACTF,EAAU,MACVF,EAAa,gBAEbI,GAAS,GACTF,EAAU,OACVF,EAAa,cARF,2CAAH,qDAYVc,EAAY,uCAAG,4BAAAD,EAAA,6DAEbE,EAAU,IAAIC,SAEVC,OAAO,eAAgB,oBAJd,SAMXC,MA5BE,oBA4BU,CACdC,OAAQ,OACRJ,QAASA,EACTK,KAAMC,KAAKC,UAAU,CAAEC,MAAO9B,MAE7B+B,MAAK,SAAAC,GACF,IAAKA,EAASC,GACV,MAAMC,MAAM,4BAEhB,OAAOF,EAASG,UAEnBJ,MAAK,SAAAK,GACEA,EAAKC,UACLlC,EAAQiC,EAAKE,SACbjC,EAAU,IACNK,GAAOI,EAAMsB,EAAKE,UAEtBF,EAAKG,UACLlC,EAAU+B,EAAKI,OACfrC,EAAQ,QAGfsC,OAAM,SAAAC,GACc,eAAbA,EAAIC,MACJC,QAAQC,IAAI,iBAEhBD,QAAQC,IAAIH,EAAIF,UAhCP,2CAAH,qDA0ClB,OANAM,qBAAU,WACNrC,EAAU,MACVF,EAAa,cACbK,EAAMM,QAAU6B,OAAOC,kBACxB,IAIC,sBAAKC,UAAU,YAAf,UACI,0BACIA,UAAU,cACVC,UAAQ,EACRC,SAAU,SAAAC,GAAC,OAAI/C,EAAU+C,EAAEC,OAAOC,QAClCA,MAAOlD,IAEX,oBAAI6C,UAAU,kBAAd,yBACA,wBACIA,UAAU,eACVM,QAASpC,EAFb,SAGEX,IACF,uBACIyC,UAAU,aACVE,SAAU,SAAAC,GAAC,OAAI7C,EAAa6C,EAAEC,OAAOC,QAFzC,SAGEhD,IACF,uBACIkD,KAAK,OACLC,UAAQ,EACRH,MAAOtD,EACPmD,SAAU,SAAAC,GAAC,OAAInD,EAAoBmD,EAAEC,OAAOC,QAC5CL,UAAU,qBAEd,wBACIA,UAAU,mBACVM,QAASlC,EAFb,sBAKA,0BACI4B,UAAU,iBACVC,UAAQ,EACRC,SAAU,SAAAC,GAAC,OAAIjD,EAAQiD,EAAEC,OAAOC,QAChCA,MAAOpD,QC5FRwD,MAdf,WACE,OACE,cAAC,IAAD,UACG,qBAAKT,UAAU,MAAf,SACC,cAAC,IAAD,UACE,cAAC,IAAD,CAAOU,KAAK,IAAZ,SACE,cAAC,EAAD,aCJZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.58a3f1fd.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\r\n\r\n\r\nconst Homepage = () => {\r\n    const [amountOfSnippets, setamountOfSnippets] = useState('')\r\n    const [text, setText] = useState('')\r\n    const [failed, setFailed] = useState('')\r\n    const [soundText, setSoundText] = useState('')\r\n    const [button, setButton] = useState('')\r\n    const [muted, setMuted] = useState(false)\r\n\r\n    const url = '/api/generateText' ;\r\n\r\n    const synth = useRef();\r\n\r\n    const speak = (text) => {\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.lang = 'en-US';\r\n        synth.current.speak(utterance);\r\n    }\r\n\r\n    const textReader = async () => {\r\n        if (muted) {\r\n            setMuted(false);\r\n            setButton(\"On\");\r\n            setSoundText(\"speech Off\")\r\n        } else {\r\n            setMuted(true);\r\n            setButton(\"Off\");\r\n            setSoundText(\"speech On\");\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n\r\n        let headers = new Headers();\r\n\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        await fetch(url , {\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: JSON.stringify({ score: amountOfSnippets })\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw Error('could not fetch the data')\r\n                }\r\n                return response.json()\r\n            })\r\n            .then(data => {\r\n                if (data.success) {\r\n                    setText(data.message)\r\n                    setFailed(\"\")\r\n                    if (muted) speak(data.message);\r\n                }\r\n                if (data.failure) {\r\n                    setFailed(data.error)\r\n                    setText(\"\")\r\n                }\r\n            })\r\n            .catch(err => {\r\n                if (err.name === 'AbortError') {\r\n                    console.log('fetch aborted')\r\n                }\r\n                console.log(err.error)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        setButton(\"On\");\r\n        setSoundText(\"speech Off\")\r\n        synth.current = window.speechSynthesis;\r\n    }, [])\r\n\r\n    return (\r\n\r\n        <div className=\"container\">\r\n            <textarea\r\n                className=\"inputs-form\"\r\n                disabled\r\n                onChange={e => setFailed(e.target.value)}\r\n                value={failed}\r\n            ></textarea>\r\n            <h2 className=\"container-title\">TextSnippet</h2>\r\n            <button\r\n                className=\"sound-button\"\r\n                onClick={textReader}\r\n            >{button}</button>\r\n            <small\r\n                className=\"sound-text\"\r\n                onChange={e => setSoundText(e.target.value)}\r\n            >{soundText}</small>\r\n            <input\r\n                type=\"text\"\r\n                required\r\n                value={amountOfSnippets}\r\n                onChange={e => setamountOfSnippets(e.target.value)}\r\n                className=\"container-search\" />\r\n\r\n            <button\r\n                className=\"container-button\"\r\n                onClick={handleSubmit}>\r\n                Generate</button>\r\n\r\n            <textarea\r\n                className=\"container-text\"\r\n                disabled\r\n                onChange={e => setText(e.target.value)}\r\n                value={text}>\r\n            </textarea>\r\n        </div>\r\n    );\r\n}\r\nexport default Homepage;","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Homepage from \"./Homepage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n       <div className=\"App\">\r\n        <Switch>\r\n          <Route path=\"/\" >\r\n            <Homepage/>\r\n          </Route>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}